using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Otus.RabbitMq.Settings
{
    public class QueueSetting
    {
        /// <summary>
        /// Название очереди
        /// </summary>
        public string Queue { get; set; }

        /// <summary>
        /// Обмен или биржа. Пустая строка обозначает обмен по умолчанию.
        /// Сообщения направляются в указанную очередь, если она существует.
        /// </summary>
        public string Exchange { get; set; } = string.Empty;

        /// <summary>
        /// тип обмена (direct - прямой , topic - топик\темы , headers - заголовки и fanout - разветвление)
        /// fanout (ExchangeType.Fanout) - Обмен\Биржа разветвления рассылает все полученные сообщения во все известные ему очереди.
        /// direct (ExchangeType.Direct) - Прямой обмен — сообщение попадает в очереди, ключ привязки которых точно соответствует ключу маршрутизации сообщения.
        /// Если соответствие не найдено, сообщение будет удалено.
        /// topic (ExchangeType.Topic) - Обмен темами\топиками. Сообщения, отправляемые в тему обмена, не могут иметь произвольный routing_key — это должен быть список слов,
        /// разделенных точками.В ключе маршрутизации может быть сколько угодно слов, но не более 255 байт.Ключ привязки также должен быть в той же форме. 
        /// Логика обмена темами аналогична прямому — сообщение, отправленное с определенным ключом маршрутизации, будет доставлено во все очереди, связанные с соответствующим ключом привязки.
        /// два важных особых случая привязки ключей:
        /// * (звездочка) может заменить ровно одно слово.
        /// # (решетка) может заменить ноль или более слов.
        /// </summary>
        public string ExchangeType { get; set; }

        //Ключи привязки (fanout игнорирует ключи привязки)
        public string[] BindingKeys { get; set; }

        //Сколько сообщений отправлять рабочему элементу за раз.
        //Или, другими словами, не отправлять новое сообщение рабочему процессу,
        //пока он не обработает и не подтвердит предыдущее.
        public ushort? PrefetchCount { get; set; }
    }
}
